@precedence{inf @left }
@top Program { Statement+  }

Statement[@isGroup=statement] { 
  Regex Block |
  Expression? Block |
  BeginStatement |
  EndStatement |
  FunctionStatement |
  WhileStatement |
  DoWhileStatement |
  ForStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  IfStatement |
  PrintStatement |
  DeleteStatement |
  AssignStatement 
}

Block { LeftBrace Statement+ RightBrace}

BeginStatement { kw<"BEGIN"> Block }
EndStatement { kw<"END"> Block }

FunctionStatement { kw<"function"> identifier '(' identifier? (',' identifier)* ')' Block }

WhileStatement { kw<"while"> Expression Block}
DoWhileStatement { kw<"do"> Block kw<"while"> Expression }
ForStatement { kw<"for"> '(' ( identifier kw<"in"> identifier | Statement ';'  Expression ';' Statement ';') ')' Block }
BreakStatement { kw<"break"> }
ContinueStatement { kw<"continue"> }
ReturnStatement { kw<"return"> Expression }
IfStatement { kw<"if"> Expression Block (kw<"else"> kw<"if"> Expression Block)* (kw<"else"> Block)? }
PrintStatement { kw<"print"> Expression (',' Expression)* }
DeleteStatement { kw<"delete"> Expression }
AssignStatement { 
  identifier ( ',' identifier)* '=' Expression (',' Expression)* |
  identifier ModifyAndAssignOperators identifier
}

Expression { 
  Prefix | Expression !inf InfixOperator Expression | StdLibCall '(' Expression? (',' Expression)* ')'
}

StdLibCall {kw<"length"> | kw<"sub"> | kw<"gsub"> | kw<"split"> | kw<"tolower"> | kw<"toupper"> | kw<"substr"> | kw<"match"> | kw<"index"> }

Prefix { !inf PrefixOp? identifier !inf PrefixOp? | String | Number | '-' | '!' }

kw<term> { @specialize[@name={term}]<identifier, term> }

@skip { space | LineComment }



@tokens {
  String[isolate] {
    '"' ( ![\\\n"])* '"' |
    "'" (![\\\n'] )* "'"
  }
  stateidentifier[@export] { $[0-9a-zA-Z_]+ } 
  Regex { "/" (![\n]* "/" | ![\n]* "/" ![\n]* "/")+}
  identifier[@export] { $[0-9a-zA-Z_$@]+ } 
  Colon { ":" }
  InfixOperator { '+'| '*'| '%'| '^'| '&&'| '||'}
  PrefixOp { '++' | '--' }
  ModifyAndAssignOperators { '+='| '-='| '*='| '/='| '%='| '^='}
  LeftBrace { "{" }
  RightBrace { "}" }
  Name { '$'?@asciiLetter+ }
  Number { @digit+ }
  space { @whitespace+ }
  LineComment { "#" ![\n]* }
  @precedence { Regex, LineComment, space,  Number, identifier}
}

